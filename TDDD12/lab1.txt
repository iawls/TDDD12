Oscar Isola oscis711
Rasmus Falkenhem rasfa749

1) mysql> select * from jbemployee;
+------+--------------------+--------+---------+-----------+-----------+
| id   | name               | salary | manager | birthyear | startyear |
+------+--------------------+--------+---------+-----------+-----------+
|   10 | Ross, Stanley      |  15908 |     199 |      1927 |      1945 |
|   11 | Ross, Stuart       |  12067 |    NULL |      1931 |      1932 |
|   13 | Edwards, Peter     |   9000 |     199 |      1928 |      1958 |
|   26 | Thompson, Bob      |  13000 |     199 |      1930 |      1970 |
|   32 | Smythe, Carol      |   9050 |     199 |      1929 |      1967 |
|   33 | Hayes, Evelyn      |  10100 |     199 |      1931 |      1963 |
|   35 | Evans, Michael     |   5000 |      32 |      1952 |      1974 |
|   37 | Raveen, Lemont     |  11985 |      26 |      1950 |      1974 |
|   55 | James, Mary        |  12000 |     199 |      1920 |      1969 |
|   98 | Williams, Judy     |   9000 |     199 |      1935 |      1969 |
|  129 | Thomas, Tom        |  10000 |     199 |      1941 |      1962 |
|  157 | Jones, Tim         |  12000 |     199 |      1940 |      1960 |
|  199 | Bullock, J.D.      |  27000 |    NULL |      1920 |      1920 |
|  215 | Collins, Joanne    |   7000 |      10 |      1950 |      1971 |
|  430 | Brunet, Paul C.    |  17674 |     129 |      1938 |      1959 |
|  843 | Schmidt, Herman    |  11204 |      26 |      1936 |      1956 |
|  994 | Iwano, Masahiro    |  15641 |     129 |      1944 |      1970 |
| 1110 | Smith, Paul        |   6000 |      33 |      1952 |      1973 |
| 1330 | Onstad, Richard    |   8779 |      13 |      1952 |      1971 |
| 1523 | Zugnoni, Arthur A. |  19868 |     129 |      1928 |      1949 |
| 1639 | Choy, Wanda        |  11160 |      55 |      1947 |      1970 |
| 2398 | Wallace, Maggie J. |   7880 |      26 |      1940 |      1959 |
| 4901 | Bailey, Chas M.    |   8377 |      32 |      1956 |      1975 |
| 5119 | Bono, Sonny        |  13621 |      55 |      1939 |      1963 |
| 5219 | Schwarz, Jason B.  |  13374 |      33 |      1944 |      1959 |
+------+--------------------+--------+---------+-----------+-----------+
25 rows in set (0.01 sec)

2)mysql> select * from jbdept order by name;
+----+------------------+-------+-------+---------+
| id | name             | store | floor | manager |
+----+------------------+-------+-------+---------+
|  1 | Bargain          |     5 |     0 |      37 |
| 35 | Book             |     5 |     1 |      55 |
| 10 | Candy            |     5 |     1 |      13 |
| 73 | Children's       |     5 |     1 |      10 |
| 43 | Children's       |     8 |     2 |      32 |
| 19 | Furniture        |     7 |     4 |      26 |
| 99 | Giftwrap         |     5 |     1 |      98 |
| 14 | Jewelry          |     8 |     1 |      33 |
| 47 | Junior Miss      |     7 |     2 |     129 |
| 65 | Junior's         |     7 |     3 |      37 |
| 26 | Linens           |     7 |     3 |     157 |
| 20 | Major Appliances |     7 |     4 |      26 |
| 58 | Men's            |     7 |     2 |     129 |
| 60 | Sportswear       |     5 |     1 |      10 |
| 34 | Stationary       |     5 |     1 |      33 |
| 49 | Toys             |     8 |     2 |      35 |
| 63 | Women's          |     7 |     3 |      32 |
| 70 | Women's          |     5 |     1 |      10 |
| 28 | Women's          |     8 |     2 |      32 |
+----+------------------+-------+-------+---------+
19 rows in set (0.01 sec)

3) mysql> SELECT * FROM jbitem WHERE qoh = 0;
Empty set (0.00 sec)

4) mysql> SELECT * FROM jbemployee WHERE salary >= 9000 AND salary <= 10000;
+-----+----------------+--------+---------+-----------+-----------+
| id  | name           | salary | manager | birthyear | startyear |
+-----+----------------+--------+---------+-----------+-----------+
|  13 | Edwards, Peter |   9000 |     199 |      1928 |      1958 |
|  32 | Smythe, Carol  |   9050 |     199 |      1929 |      1967 |
|  98 | Williams, Judy |   9000 |     199 |      1935 |      1969 |
| 129 | Thomas, Tom    |  10000 |     199 |      1941 |      1962 |
+-----+----------------+--------+---------+-----------+-----------+
4 rows in set (0.00 sec)

5) mysql> SELECT name, startyear - birthyear AS age FROM jbemployee ;
+--------------------+------+
| name               | age  |
+--------------------+------+
| Ross, Stanley      |   18 |
| Ross, Stuart       |    1 |
| Edwards, Peter     |   30 |
| Thompson, Bob      |   40 |
| Smythe, Carol      |   38 |
| Hayes, Evelyn      |   32 |
| Evans, Michael     |   22 |
| Raveen, Lemont     |   24 |
| James, Mary        |   49 |
| Williams, Judy     |   34 |
| Thomas, Tom        |   21 |
| Jones, Tim         |   20 |
| Bullock, J.D.      |    0 |
| Collins, Joanne    |   21 |
| Brunet, Paul C.    |   21 |
| Schmidt, Herman    |   20 |
| Iwano, Masahiro    |   26 |
| Smith, Paul        |   21 |
| Onstad, Richard    |   19 |
| Zugnoni, Arthur A. |   21 |
| Choy, Wanda        |   23 |
| Wallace, Maggie J. |   19 |
| Bailey, Chas M.    |   19 |
| Bono, Sonny        |   24 |
| Schwarz, Jason B.  |   15 |
+--------------------+------+
25 rows in set (0.00 sec)

6) mysql> SELECT name FROM jbemployee WHERE name LIKE '%son,%';
+---------------+
| name          |
+---------------+
| Thompson, Bob |
+---------------+
1 row in set (0.00 sec)

7) mysql> SELECT name FROM jbitem WHERE supplier = (SELECT id FROM jbsupplier WHERE name = 'Fisher-Price');
+-----------------+
| name            |
+-----------------+
| Maze            |
| The 'Feel' Book |
| Squeeze Ball    |
+-----------------+
3 rows in set (0.01 sec)

8) mysql> SELECT jbitem.name FROM jbitem INNER JOIN jbsupplier ON jbitem.supplier = jbsupplier.id WHERE jbsupplier.name = 'Fisher-Price';
+-----------------+
| name            |
+-----------------+
| Maze            |
| The 'Feel' Book |
| Squeeze Ball    |
+-----------------+
3 rows in set (0.00 sec)

9) mysql> SELECT name FROM jbcity WHERE id IN  (SELECT city FROM jbsupplier);
+----------------+
| name           |
+----------------+
| Amherst        |
| Boston         |
| New York       |
| White Plains   |
| Hickville      |
| Atlanta        |
| Madison        |
| Paxton         |
| Dallas         |
| Denver         |
| Salt Lake City |
| Los Angeles    |
| San Diego      |
| San Francisco  |
| Seattle        |
+----------------+
15 rows in set (0.00 sec)

10) mysql> SELECT name, color FROM jbparts WHERE weight > (SELECT weight FROM jbparts WHERE name = 'card reader');
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.00 sec)

11) mysql> SELECT a.name, a.color FROM jbparts a LEFT JOIN jbparts b ON b.name = 'card reader' WHERE a.weight > b.weight;
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.00 sec)

12) mysql> SELECT avg(weight) FROM jbparts WHERE color = 'black';
+-------------+
| avg(weight) |
+-------------+
|    347.2500 |
+-------------+
1 row in set (0.00 sec)

13) mysql> SELECT jbsupplier.name, SUM(jbparts.weight * jbsupply.quan) AS weight FROM jbsupplier 
	->INNER JOIN jbcity ON jbcity.id = jbsupplier.city  
	->INNER JOIN jbsupply ON jbsupplier.id = jbsupply.supplier 
	->INNER JOIN jbparts ON jbparts.id = jbsupply.part WHERE jbcity.state = 'Mass' 
	->GROUP BY jbsupplier.name;
+--------------+---------+
| name         | weight  |
+--------------+---------+
| DEC          |    3120 |
| Fisher-Price | 1135000 |
+--------------+---------+
2 rows in set (0.01 sec)

14) CREATE TABLE tb(
	 ->id integer,  
	 ->name varchar(40), 
	 ->dept integer,
	 ->price integer NOT NULL, 
	 ->qoh integer NOT NULL,
	 ->supplier integer,
	 ->PRIMARY KEY (id),
	 ->FOREIGN KEY(dept) REFERENCES jbdept(id),
	 ->FOREIGN KEY(supplier) REFERENCES jbsupplier(id));
Query OK, 0 rows affected (0.03 sec)

mysql> INSERT INTO tb(id, name, dept, price,qoh, supplier) 	
	->SELECT * FROM jbitem
	->WHERE price < (SELECT avg(price) FROM jbitem);
Query OK, 14 rows affected (0.00 sec)
Records: 14  Duplicates: 0  Warnings: 0

15) mysql> CREATE VIEW itemview AS 
    -> SELECT * FROM jbitem
    -> WHERE price < (SELECT avg(price) FROM jbitem);
Query OK, 0 rows affected (0.00 sec)

16) A view works as virtual table which gets it data from another table or view. The view is dynamic, it updates it self when it is queried by the user, therefore having up to date data. A table is static, the data needs to be "manually" updated. 

17) mysql> CREATE VIEW debitview AS SELECT debit,
	   ->SUM(jbitem.price * jbsale.quantity) 
	   ->AS price FROM jbsale, jbitem 	
	   ->WHERE jbitem.id = jbsale.item GROUP BY debit; 
Query OK, 0 rows affected (0.01 sec)

mysql> SELECT * FROM debitview;
+--------+-------+
| debit  | price |
+--------+-------+
| 100581 |  2050 |
| 100582 |  1000 |
| 100586 | 13446 |
| 100592 |   650 |
| 100593 |   430 |
| 100594 |  3295 |
+--------+-------+
6 rows in set (0.00 sec)


18) mysql> CREATE VIEW debitview2 AS SELECT debit, 
	  ->SUM(jbitem.price * jbsale.quantity) 
	  ->AS price FROM jbsale 
	  ->INNER JOIN jbitem ON jbsale.item = jbitem.id 
	  ->GROUP BY debit;
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT * FROM debitview2;
+--------+-------+
| debit  | price |
+--------+-------+
| 100581 |  2050 |
| 100582 |  1000 |
| 100586 | 13446 |
| 100592 |   650 |
| 100593 |   430 |
| 100594 |  3295 |
+--------+-------+
6 rows in set (0.00 sec)

We use inner join because each sale have an item and each item doesn't have a sale. A left join could have been used with the same result since jb sale doesn't have any entrys without items.

19)a) 
remove jbsupplier.koret
remove jbitem.earrings
remove jbitem.gold ring
remove jbsale.debit 100582

mysql> DELETE jbsale FROM jbsale RIGHT JOIN jbitem ON jbitem.id = jbsale.item JOIN jbsupplier ON jbsupplier.id = jbitem.supplier JOIN jbcity ON jbcity.name = 'Los Angeles' AND jbcity.id = jbsupplier.city;  
Query OK, 1 row affected (0.00 sec)

mysql> DELETE jbitem FROM jbitem JOIN jbsupplier ON jbsupplier.id = jbitem.supplier JOIN jbcity ON jbcity.name = 'Los Angeles' AND jbcity.id = jbsupplier.city;  
Query OK, 2 rows affected (0.00 sec)

mysql> DELETE jbsupplier FROM jbsupplier JOIN jbcity ON jbcity.name = 'Los Angeles' AND jbcity.id = jbsupplier.city;  
Query OK, 1 row affected (0.00 sec)

b) We started from the bottom to avoid foreign key constraints and did it in three steps. First we removed the jbsale row. And then we removed the items in jbitem. And then we could finally remove the supplier from jbsupplier.

20) 
mysql> CREATE VIEW jbsale_supply(supplier, item, quantity) AS SELECT jbsupplier.name, jbitem.name, jbsale.quantity FROM jbsupplier JOIN jbitem ON jbsupplier.id = jbitem.supplier LEFT JOIN jbsale ON jbsale.item = jbitem.id;
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT supplier, sum(quantity) AS sum FROM jbsale_supply GROUP BY supplier;
+--------------+------+
| supplier     | sum  |
+--------------+------+
| Cannon       |    6 |
| Fisher-Price | NULL |
| Levi-Strauss |    1 |
| Playskool    |    2 |
| White Stag   |    4 |
| Whitman's    |    2 |
+--------------+------+
6 rows in set (0.00 sec)







